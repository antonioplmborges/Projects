/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package elevatorsim.ui;

import elevatorism.filetype.FileTypeFilter;
import elevatorsim.controller.ConfigController;
import elevatorsim.data.Scenario;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author jpaquette19
 */
public class ConfigWindow extends javax.swing.JFrame {

    ConfigController controller;
    /**
     * Creates new form NewJFrame
     */
    public ConfigWindow(ConfigController c) {
        initComponents();
        controller = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        populationPanel = new javax.swing.JPanel();
        avgVisitorNumbLabel = new javax.swing.JLabel();
        maxVisitorNumbLabel = new javax.swing.JLabel();
        avgVisitorNumbField = new javax.swing.JTextField();
        maxVisitorNumbField = new javax.swing.JTextField();
        buildingPanel = new javax.swing.JPanel();
        elevatorNumbLabel = new javax.swing.JLabel();
        floorNumbLabel = new javax.swing.JLabel();
        elevatorNumbField = new javax.swing.JTextField();
        floorNumbField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        elevatorSpeedField = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        speedField = new javax.swing.JTextField();
        speedRangeLabel = new javax.swing.JLabel();
        speedLabel = new javax.swing.JLabel();
        peekHrLabel = new javax.swing.JLabel();
        checkBox0 = new javax.swing.JCheckBox();
        checkBox1 = new javax.swing.JCheckBox();
        checkBox2 = new javax.swing.JCheckBox();
        checkBox3 = new javax.swing.JCheckBox();
        checkBox4 = new javax.swing.JCheckBox();
        checkBox5 = new javax.swing.JCheckBox();
        checkBox6 = new javax.swing.JCheckBox();
        checkBox7 = new javax.swing.JCheckBox();
        checkBox8 = new javax.swing.JCheckBox();
        checkBox9 = new javax.swing.JCheckBox();
        checkBox10 = new javax.swing.JCheckBox();
        checkBox11 = new javax.swing.JCheckBox();
        checkBox12 = new javax.swing.JCheckBox();
        checkBox13 = new javax.swing.JCheckBox();
        checkBox14 = new javax.swing.JCheckBox();
        checkBox15 = new javax.swing.JCheckBox();
        checkBox16 = new javax.swing.JCheckBox();
        checkBox17 = new javax.swing.JCheckBox();
        checkBox18 = new javax.swing.JCheckBox();
        checkBox19 = new javax.swing.JCheckBox();
        checkBox20 = new javax.swing.JCheckBox();
        checkBox21 = new javax.swing.JCheckBox();
        checkBox22 = new javax.swing.JCheckBox();
        checkBox23 = new javax.swing.JCheckBox();
        allCheckBox = new javax.swing.JCheckBox();
        clearButton = new javax.swing.JButton();
        strTimeLabel = new javax.swing.JLabel();
        endTimeLabel = new javax.swing.JLabel();
        startTimeField = new javax.swing.JTextField();
        endTimeField = new javax.swing.JTextField();
        startTimeRangeLabel = new javax.swing.JLabel();
        endTimeRangeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuration Window");

        populationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Population", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        populationPanel.setName("Population"); // NOI18N

        avgVisitorNumbLabel.setText("Avg Number of visitors/hour");

        maxVisitorNumbLabel.setText("Max Number of visitors/hour");

        avgVisitorNumbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                avgVisitorNumbFieldKeyReleased(evt);
            }
        });

        maxVisitorNumbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxVisitorNumbFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout populationPanelLayout = new javax.swing.GroupLayout(populationPanel);
        populationPanel.setLayout(populationPanelLayout);
        populationPanelLayout.setHorizontalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(populationPanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(populationPanelLayout.createSequentialGroup()
                        .addComponent(avgVisitorNumbLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(avgVisitorNumbField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(populationPanelLayout.createSequentialGroup()
                        .addComponent(maxVisitorNumbLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(maxVisitorNumbField))))
        );
        populationPanelLayout.setVerticalGroup(
            populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(populationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avgVisitorNumbLabel)
                    .addComponent(avgVisitorNumbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(populationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxVisitorNumbLabel)
                    .addComponent(maxVisitorNumbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        buildingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Building", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        elevatorNumbLabel.setText("Number of Elevators");

        floorNumbLabel.setText("Number of Floors");

        elevatorNumbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                elevatorNumbFieldKeyReleased(evt);
            }
        });

        floorNumbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                floorNumbFieldKeyReleased(evt);
            }
        });

        jLabel1.setText("Elevator Speed (seonds/floor)");

        elevatorSpeedField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                elevatorSpeedFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout buildingPanelLayout = new javax.swing.GroupLayout(buildingPanel);
        buildingPanel.setLayout(buildingPanelLayout);
        buildingPanelLayout.setHorizontalGroup(
            buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elevatorNumbLabel)
                    .addComponent(floorNumbLabel)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(elevatorNumbField, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(floorNumbField, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                    .addComponent(elevatorSpeedField)))
        );
        buildingPanelLayout.setVerticalGroup(
            buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buildingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elevatorNumbLabel)
                    .addComponent(elevatorNumbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(elevatorSpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buildingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(floorNumbLabel)
                    .addComponent(floorNumbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        loadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elevatorism/Image/Load.png"))); // NOI18N
        loadButton.setText("Load");
        loadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elevatorism/Image/save.png"))); // NOI18N
        saveButton.setText("Save");
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elevatorism/Image/run.png"))); // NOI18N
        runButton.setText("Run");
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        speedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedFieldActionPerformed(evt);
            }
        });
        speedField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                speedFieldKeyReleased(evt);
            }
        });

        speedRangeLabel.setText("(1-1000)");

        speedLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        speedLabel.setText("Simulation Run Speed(seconds/s)");

        peekHrLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        peekHrLabel.setText("Peek Hours");

        checkBox0.setText("0:00");
        checkBox0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBox0ActionPerformed(evt);
            }
        });

        checkBox1.setText("1:00");

        checkBox2.setText("2:00");

        checkBox3.setText("3:00");

        checkBox4.setText("4:00");

        checkBox5.setText("5:00");

        checkBox6.setText("6:00");

        checkBox7.setText("7:00");

        checkBox8.setText("8:00");

        checkBox9.setText("9:00");

        checkBox10.setText("10:00");

        checkBox11.setText("11:00");

        checkBox12.setText("12:00");

        checkBox13.setText("13:00");

        checkBox14.setText("14:00");

        checkBox15.setText("15:00");

        checkBox16.setText("16:00");

        checkBox17.setText("17:00");

        checkBox18.setText("18:00");

        checkBox19.setText("19:00");

        checkBox20.setText("20:00");

        checkBox21.setText("21:00");

        checkBox22.setText("22:00");

        checkBox23.setText("23:00");

        allCheckBox.setText("All");
        allCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCheckBoxActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        strTimeLabel.setText("Start Time");

        endTimeLabel.setText("End Time");

        startTimeField.setText("0");
        startTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimeFieldActionPerformed(evt);
            }
        });
        startTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                startTimeFieldKeyReleased(evt);
            }
        });

        endTimeField.setText("23");
        endTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTimeFieldActionPerformed(evt);
            }
        });
        endTimeField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                endTimeFieldFocusLost(evt);
            }
        });
        endTimeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                endTimeFieldKeyReleased(evt);
            }
        });

        startTimeRangeLabel.setText("(0-23)");

        endTimeRangeLabel.setText("(0-23)");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(strTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startTimeField))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(endTimeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(endTimeField)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startTimeRangeLabel)
                            .addComponent(endTimeRangeLabel))
                        .addGap(402, 402, 402))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(checkBox6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox20))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(checkBox5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox19))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(checkBox4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox18))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(checkBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBox15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBox22))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(checkBox0)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBox7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkBox14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox21))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(speedLabel)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(speedField)
                                            .addComponent(peekHrLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(allCheckBox)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(clearButton))
                                            .addComponent(speedRangeLabel)))))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(checkBox2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBox9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(checkBox16))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(checkBox3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBox10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(checkBox17)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkBox23)))
                        .addGap(372, 372, 372))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(speedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedRangeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(peekHrLabel)
                    .addComponent(allCheckBox)
                    .addComponent(clearButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox0, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBox7)
                    .addComponent(checkBox14)
                    .addComponent(checkBox21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox1)
                    .addComponent(checkBox8)
                    .addComponent(checkBox15)
                    .addComponent(checkBox22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox2)
                    .addComponent(checkBox9)
                    .addComponent(checkBox16)
                    .addComponent(checkBox23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox3)
                    .addComponent(checkBox10)
                    .addComponent(checkBox17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox4)
                    .addComponent(checkBox11)
                    .addComponent(checkBox18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox5)
                    .addComponent(checkBox12)
                    .addComponent(checkBox19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBox6)
                    .addComponent(checkBox13)
                    .addComponent(checkBox20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strTimeLabel)
                    .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startTimeRangeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTimeLabel)
                    .addComponent(endTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endTimeRangeLabel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton))
                    .addComponent(populationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buildingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(48, 48, 48)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addComponent(populationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(158, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed

        JFileChooser chooser = new JFileChooser(new File(""));
        chooser.setDialogTitle("Load a file");
        chooser.setFileFilter(new FileTypeFilter(".txt", "Text File"));
        int result = chooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            String filename = file.getAbsolutePath();

            try {
                FileReader fileReader = new FileReader(filename);

                BufferedReader bufferedReader = new BufferedReader(fileReader);

                try {

                    //retrieves the strings found in the file and validates each field
                    avgVisitorNumbField.setText(bufferedReader.readLine());
                    avgVisitorNumbFieldKeyReleased(null);

                    maxVisitorNumbField.setText(bufferedReader.readLine());
                    maxVisitorNumbFieldKeyReleased(null);

                    elevatorNumbField.setText(bufferedReader.readLine());
                    elevatorNumbFieldKeyReleased(null);

                    elevatorSpeedField.setText(bufferedReader.readLine());
                    elevatorSpeedFieldKeyReleased(null);
                    
                    floorNumbField.setText(bufferedReader.readLine());
                    floorNumbFieldKeyReleased(null);

                    speedField.setText(bufferedReader.readLine());
                    speedFieldKeyReleased(null);

                    startTimeField.setText(bufferedReader.readLine());
                    startTimeFieldKeyReleased(null);

                    endTimeField.setText(bufferedReader.readLine());
                    endTimeFieldFocusLost(null);
                    
                    checkBox0.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox1.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox2.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox3.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox4.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox5.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox6.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox7.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox8.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox9.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox10.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox11.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox12.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox13.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox14.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox15.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox16.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox17.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox18.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox19.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox20.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox21.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox22.setSelected((bufferedReader.readLine().equals("t"))?true:false);
                    checkBox23.setSelected((bufferedReader.readLine().equals("t"))?true:false);

                } catch (IOException e) {
                    System.out.println("IOExecption");
                }

            } catch (FileNotFoundException e) {
                System.out.println("File Not Found");
            }

    }//GEN-LAST:event_loadButtonActionPerformed
    }
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        //if any field is empty show error message, else show the "save file" window
        if (avgVisitorNumbField.getText().equals("") || maxVisitorNumbField.getText().equals("") || elevatorNumbField.getText().equals("") || floorNumbField.getText().equals("")
                || startTimeField.getText().equals("") || speedField.getText().equals("") || endTimeField.getText().equals("")) {

            JOptionPaneERROR_MESSAGE("Error", "Incomplete fields");

        } else {

            JFileChooser chooser = new JFileChooser(new File(""));
            chooser.setDialogTitle("Save a File");
            chooser.setFileFilter(new FileTypeFilter(".txt", "Text File"));
            int result = chooser.showSaveDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();

                String filePath = file.getAbsolutePath();
                if (!filePath.endsWith(".txt")) {
                    file = new File(filePath + ".txt");
                }

                if ((file != null) && file.exists()) {
                    int response = JOptionPane.showConfirmDialog(this,
                            "The file " + file.getName()
                            + " already exists. Do you want to replace the existing file?",
                            "Ovewrite file", JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                    if (response == JOptionPane.NO_OPTION) {
                        saveButtonActionPerformed(evt);
                    }

                }

                FileWriter writer = null;
                try {
                    writer = new FileWriter(file);

                    //writes the fields into the file
                    avgVisitorNumbField.write(writer);
                    writer.write("\r\n");//new line
                    maxVisitorNumbField.write(writer);
                    writer.write("\r\n");
                    elevatorNumbField.write(writer);
                    writer.write("\r\n");
                    elevatorSpeedField.write(writer);
                    writer.write("\r\n");
                    floorNumbField.write(writer);
                    writer.write("\r\n");
                    speedField.write(writer);
                    writer.write("\r\n");
                    startTimeField.write(writer);
                    writer.write("\r\n");
                    endTimeField.write(writer);
                    writer.write("\r\n");
                    writer.write((checkBox0.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox1.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox2.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox3.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox4.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox5.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox6.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox7.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox8.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox9.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox10.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox11.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox12.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox13.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox14.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox15.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox16.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox17.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox18.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox19.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox20.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox21.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox22.isSelected())?"t\r\n":"f\r\n");
                    writer.write((checkBox23.isSelected())?"t\r\n":"f\r\n");

                } catch (IOException exception) {
                    System.err.println("Save oops");
                } finally {
                    if (writer != null) {
                        try {
                            writer.close();
                        } catch (IOException exception) {
                            System.err.println("Error closing writer");
                            exception.printStackTrace();
                        }
                    }


    }//GEN-LAST:event_saveButtonActionPerformed
            }
        }
    }
    private void checkBox0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBox0ActionPerformed


    }//GEN-LAST:event_checkBox0ActionPerformed

    private void allCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCheckBoxActionPerformed

        //select all enabled check boxes(0-24)
        if (allCheckBox.isSelected() && checkBox0.isEnabled()) 
            checkBox0.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox1.isEnabled()) 
            checkBox1.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox2.isEnabled()) 
            checkBox2.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox3.isEnabled()) 
            checkBox3.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox4.isEnabled()) 
            checkBox4.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox5.isEnabled()) 
            checkBox5.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox6.isEnabled()) 
            checkBox6.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox7.isEnabled()) 
            checkBox7.setSelected(true);
       
        if (allCheckBox.isSelected() && checkBox8.isEnabled()) 
            checkBox8.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox9.isEnabled()) 
            checkBox9.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox10.isEnabled()) 
            checkBox10.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox11.isEnabled()) 
            checkBox11.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox12.isEnabled()) 
            checkBox12.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox13.isEnabled()) 
            checkBox13.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox14.isEnabled()) 
            checkBox14.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox15.isEnabled()) 
            checkBox15.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox16.isEnabled()) 
            checkBox16.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox17.isEnabled()) 
            checkBox17.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox18.isEnabled()) 
            checkBox18.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox19.isEnabled()) 
            checkBox19.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox20.isEnabled()) 
            checkBox20.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox21.isEnabled()) 
            checkBox21.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox22.isEnabled()) 
            checkBox22.setSelected(true);
        
        if (allCheckBox.isSelected() && checkBox23.isEnabled()) 
            checkBox23.setSelected(true);
        

    }//GEN-LAST:event_allCheckBoxActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        //Un-checks all check boxes
        checkBox0.setSelected(false);
        checkBox1.setSelected(false);
        checkBox2.setSelected(false);
        checkBox3.setSelected(false);
        checkBox4.setSelected(false);
        checkBox5.setSelected(false);
        checkBox6.setSelected(false);
        checkBox7.setSelected(false);
        checkBox8.setSelected(false);
        checkBox9.setSelected(false);
        checkBox10.setSelected(false);
        checkBox11.setSelected(false);
        checkBox12.setSelected(false);
        checkBox13.setSelected(false);
        checkBox14.setSelected(false);
        checkBox15.setSelected(false);
        checkBox16.setSelected(false);
        checkBox17.setSelected(false);
        checkBox18.setSelected(false);
        checkBox19.setSelected(false);
        checkBox20.setSelected(false);
        checkBox21.setSelected(false);
        checkBox22.setSelected(false);
        checkBox23.setSelected(false);
        allCheckBox.setSelected(false);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void startTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeFieldActionPerformed

    }//GEN-LAST:event_startTimeFieldActionPerformed

    private void startTimeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_startTimeFieldKeyReleased
        
        try {
            //tests to see if input is an integer
            int input = Integer.parseInt(startTimeField.getText());

            if (input >= 0 && input <= 23); // its good
            else {
                startTimeField.setText("");//clear field
            }

         //if starting time is greater than ending time, set field to 0
            if (input > Integer.parseInt(endTimeField.getText())) {
                startTimeField.setText("0");
            }

        } catch (NumberFormatException e) {
            startTimeField.setText("0");
        }

        //enables all the checkboxes after ending Time
        switch (Integer.parseInt(endTimeField.getText())) {
            case 24:
                checkBox23.setEnabled(true);
            case 23:
                checkBox22.setEnabled(true);
            case 22:
                checkBox21.setEnabled(true);
            case 21:
                checkBox20.setEnabled(true);
            case 20:
                checkBox19.setEnabled(true);
            case 19:
                checkBox18.setEnabled(true);
            case 18:
                checkBox17.setEnabled(true);
            case 17:
                checkBox16.setEnabled(true);
            case 16:
                checkBox15.setEnabled(true);
            case 15:
                checkBox14.setEnabled(true);
            case 14:
                checkBox13.setEnabled(true);
            case 13:
                checkBox12.setEnabled(true);
            case 12:
                checkBox11.setEnabled(true);
            case 11:
                checkBox10.setEnabled(true);
            case 10:
                checkBox9.setEnabled(true);
            case 9:
                checkBox8.setEnabled(true);
            case 8:
                checkBox7.setEnabled(true);
            case 7:
                checkBox6.setEnabled(true);
            case 6:
                checkBox5.setEnabled(true);
            case 5:
                checkBox4.setEnabled(true);
            case 4:
                checkBox3.setEnabled(true);
            case 3:
                checkBox2.setEnabled(true);
            case 2:
                checkBox1.setEnabled(true);
            case 1:
                checkBox0.setEnabled(true);
                break;
        }
        
        //disables all the checkboxes before start Time
        switch (Integer.parseInt(startTimeField.getText())) {
            case 23:
                checkBox22.setEnabled(false);
            case 22:
                checkBox21.setEnabled(false);
            case 21:
                checkBox20.setEnabled(false);
            case 20:
                checkBox19.setEnabled(false);
            case 19:
                checkBox18.setEnabled(false);
            case 18:
                checkBox17.setEnabled(false);
            case 17:
                checkBox16.setEnabled(false);
            case 16:
                checkBox15.setEnabled(false);
            case 15:
                checkBox14.setEnabled(false);
            case 14:
                checkBox13.setEnabled(false);
            case 13:
                checkBox12.setEnabled(false);
            case 12:
                checkBox11.setEnabled(false);
            case 11:
                checkBox10.setEnabled(false);
            case 10:
                checkBox9.setEnabled(false);
            case 9:
                checkBox8.setEnabled(false);
            case 8:
                checkBox7.setEnabled(false);
            case 7:
                checkBox6.setEnabled(false);
            case 6:
                checkBox5.setEnabled(false);
            case 5:
                checkBox4.setEnabled(false);
            case 4:
                checkBox3.setEnabled(false);
            case 3:
                checkBox2.setEnabled(false);
            case 2:
                checkBox1.setEnabled(false);
            case 1:
                checkBox0.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_startTimeFieldKeyReleased

    private void endTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTimeFieldActionPerformed

    }//GEN-LAST:event_endTimeFieldActionPerformed

    private void endTimeFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_endTimeFieldKeyReleased
        
    }//GEN-LAST:event_endTimeFieldKeyReleased

    private void speedFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_speedFieldKeyReleased
        try {
            //test to see if input is an integer
            int input = Integer.parseInt(speedField.getText());

            if (input >= 1 && input <= 1000); // its good
            else {
                speedField.setText("");
            }

        } catch (NumberFormatException e) {
            speedField.setText("");
        }
    }//GEN-LAST:event_speedFieldKeyReleased

    private void avgVisitorNumbFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_avgVisitorNumbFieldKeyReleased
        try {
            //tests to see if input is an integer
            Integer.parseInt(avgVisitorNumbField.getText());

        } catch (NumberFormatException e) {
            avgVisitorNumbField.setText("");
        }
    }//GEN-LAST:event_avgVisitorNumbFieldKeyReleased

    private void maxVisitorNumbFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxVisitorNumbFieldKeyReleased
        try {
            //tests to see if input is an integer
            Integer.parseInt(maxVisitorNumbField.getText());

        } catch (NumberFormatException e) {
            maxVisitorNumbField.setText("");
        }
    }//GEN-LAST:event_maxVisitorNumbFieldKeyReleased

    private void elevatorNumbFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_elevatorNumbFieldKeyReleased
        try {
            //tests to see if input is an integer
            Integer.parseInt(elevatorNumbField.getText());

        } catch (NumberFormatException e) {
            elevatorNumbField.setText("");
        }
    }//GEN-LAST:event_elevatorNumbFieldKeyReleased

    private void floorNumbFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_floorNumbFieldKeyReleased
        try {
            //tests to see if input is an integer
            Integer.parseInt(floorNumbField.getText());

        } catch (NumberFormatException e) {
            floorNumbField.setText("");
        }
    }//GEN-LAST:event_floorNumbFieldKeyReleased

    private void elevatorSpeedFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_elevatorSpeedFieldKeyReleased
        try {
            //tests to see if input is an integer
            Integer.parseInt(elevatorSpeedField.getText());

        } catch (NumberFormatException e) {
            elevatorSpeedField.setText("");
        }
    }//GEN-LAST:event_elevatorSpeedFieldKeyReleased

    private void endTimeFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_endTimeFieldFocusLost
        try {
            //tests to see if input is an integer
            int input = Integer.parseInt(endTimeField.getText());

            if (input >= 0 && input <= 23); // its good
            else {
                endTimeField.setText("0");
            }

            if (input < Integer.parseInt(startTimeField.getText())) {
                endTimeField.setText("0");
            }

        } catch (NumberFormatException e) {
            endTimeField.setText("0");
        }

        //enables all check boxes after startime
        switch (Integer.parseInt(startTimeField.getText())) {
            case 0:
                checkBox0.setEnabled(true);
            case 1:
                checkBox1.setEnabled(true);
            case 2:
                checkBox2.setEnabled(true);
            case 3:
                checkBox3.setEnabled(true);
            case 4:
                checkBox4.setEnabled(true);
            case 5:
                checkBox5.setEnabled(true);
            case 6:
                checkBox6.setEnabled(true);
            case 7:
                checkBox7.setEnabled(true);
            case 8:
                checkBox8.setEnabled(true);
            case 9:
                checkBox9.setEnabled(true);
            case 10:
                checkBox10.setEnabled(true);
            case 11:
                checkBox11.setEnabled(true);
            case 12:
                checkBox12.setEnabled(true);
            case 13:
                checkBox13.setEnabled(true);
            case 14:
                checkBox14.setEnabled(true);
            case 15:
                checkBox15.setEnabled(true);
            case 16:
                checkBox16.setEnabled(true);
            case 17:
                checkBox17.setEnabled(true);
            case 18:
                checkBox18.setEnabled(true);
            case 19:
                checkBox19.setEnabled(true);
            case 20:
                checkBox20.setEnabled(true);
            case 21:
                checkBox21.setEnabled(true);
            case 22:
                checkBox22.setEnabled(true);
            case 23:
                checkBox23.setEnabled(true);
        }

        //disables all check boxes after endTime
        switch (Integer.parseInt(endTimeField.getText())) {
            case 1:
                checkBox2.setEnabled(false);
            case 2:
                checkBox3.setEnabled(false);
            case 3:
                checkBox4.setEnabled(false);
            case 4:
                checkBox5.setEnabled(false);
            case 5:
                checkBox6.setEnabled(false);
            case 6:
                checkBox7.setEnabled(false);
            case 7:
                checkBox8.setEnabled(false);
            case 8:
                checkBox9.setEnabled(false);
            case 9:
                checkBox10.setEnabled(false);
            case 10:
                checkBox11.setEnabled(false);
            case 11:
                checkBox12.setEnabled(false);
            case 12:
                checkBox13.setEnabled(false);
            case 13:
                checkBox14.setEnabled(false);
            case 14:
                checkBox15.setEnabled(false);
            case 15:
                checkBox16.setEnabled(false);
            case 16:
                checkBox17.setEnabled(false);
            case 17:
                checkBox18.setEnabled(false);
            case 18:
                checkBox19.setEnabled(false);
            case 19:
                checkBox20.setEnabled(false);
            case 20:
                checkBox21.setEnabled(false);
            case 21:
                checkBox22.setEnabled(false);
            case 22:
                checkBox23.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_endTimeFieldFocusLost

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (avgVisitorNumbField.getText().equals("") || maxVisitorNumbField.getText().equals("") || elevatorNumbField.getText().equals("") || floorNumbField.getText().equals("")
                || startTimeField.getText().equals("") || speedField.getText().equals("") || endTimeField.getText().equals("")) {

            JOptionPaneERROR_MESSAGE("Error", "Incomplete fields");
            return;
        }
        
        boolean[] peakHours = new boolean[24];
        peakHours[0] = checkBox0.isSelected();
        peakHours[1] = checkBox1.isSelected();
        peakHours[2] = checkBox2.isSelected();
        peakHours[3] = checkBox3.isSelected();
        peakHours[4] = checkBox4.isSelected();
        peakHours[5] = checkBox5.isSelected();
        peakHours[6] = checkBox6.isSelected();
        peakHours[7] = checkBox7.isSelected();
        peakHours[8] = checkBox8.isSelected();
        peakHours[9] = checkBox9.isSelected();
        peakHours[10] = checkBox10.isSelected();
        peakHours[11] = checkBox11.isSelected();
        peakHours[12] = checkBox12.isSelected();
        peakHours[13] = checkBox13.isSelected();
        peakHours[14] = checkBox14.isSelected();
        peakHours[15] = checkBox15.isSelected();
        peakHours[16] = checkBox16.isSelected();
        peakHours[17] = checkBox17.isSelected();
        peakHours[18] = checkBox18.isSelected();
        peakHours[19] = checkBox19.isSelected();
        peakHours[20] = checkBox20.isSelected();
        peakHours[21] = checkBox21.isSelected();
        peakHours[22] = checkBox22.isSelected();
        peakHours[23] = checkBox23.isSelected();
        
        Scenario s = new Scenario();
        s.setVisitorsPerHour(Integer.parseInt(avgVisitorNumbField.getText()));
        s.setMaxVisitorsPerHour(Integer.parseInt(maxVisitorNumbField.getText()));
        s.setNumberOfElevators(Integer.parseInt(elevatorNumbField.getText()));
        s.setElevatorSpeed(Integer.parseInt(elevatorSpeedField.getText()));
        s.setNumberOfFloors(Integer.parseInt(floorNumbField.getText()));
        s.setSimulationSpeed(Integer.parseInt(speedField.getText()));
        s.setPeakHours(peakHours);
        s.setStartTime(Integer.parseInt(startTimeField.getText()));
        s.setEndTime(Integer.parseInt(endTimeField.getText()));
        
        controller.createScenario(s);
        this.setVisible(false);
    }//GEN-LAST:event_runButtonActionPerformed

    private void speedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_speedFieldActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allCheckBox;
    private javax.swing.JTextField avgVisitorNumbField;
    private javax.swing.JLabel avgVisitorNumbLabel;
    private javax.swing.JPanel buildingPanel;
    private javax.swing.JCheckBox checkBox0;
    private javax.swing.JCheckBox checkBox1;
    private javax.swing.JCheckBox checkBox10;
    private javax.swing.JCheckBox checkBox11;
    private javax.swing.JCheckBox checkBox12;
    private javax.swing.JCheckBox checkBox13;
    private javax.swing.JCheckBox checkBox14;
    private javax.swing.JCheckBox checkBox15;
    private javax.swing.JCheckBox checkBox16;
    private javax.swing.JCheckBox checkBox17;
    private javax.swing.JCheckBox checkBox18;
    private javax.swing.JCheckBox checkBox19;
    private javax.swing.JCheckBox checkBox2;
    private javax.swing.JCheckBox checkBox20;
    private javax.swing.JCheckBox checkBox21;
    private javax.swing.JCheckBox checkBox22;
    private javax.swing.JCheckBox checkBox23;
    private javax.swing.JCheckBox checkBox3;
    private javax.swing.JCheckBox checkBox4;
    private javax.swing.JCheckBox checkBox5;
    private javax.swing.JCheckBox checkBox6;
    private javax.swing.JCheckBox checkBox7;
    private javax.swing.JCheckBox checkBox8;
    private javax.swing.JCheckBox checkBox9;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField elevatorNumbField;
    private javax.swing.JLabel elevatorNumbLabel;
    private javax.swing.JTextField elevatorSpeedField;
    private javax.swing.JTextField endTimeField;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JLabel endTimeRangeLabel;
    private javax.swing.JTextField floorNumbField;
    private javax.swing.JLabel floorNumbLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextField maxVisitorNumbField;
    private javax.swing.JLabel maxVisitorNumbLabel;
    private javax.swing.JLabel peekHrLabel;
    private javax.swing.JPanel populationPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField speedField;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JLabel speedRangeLabel;
    private javax.swing.JTextField startTimeField;
    private javax.swing.JLabel startTimeRangeLabel;
    private javax.swing.JLabel strTimeLabel;
    // End of variables declaration//GEN-END:variables
    // Class methods

    //method to create a pop up error message
    private void JOptionPaneERROR_MESSAGE(String titleBar, String message) {

        //JOptionPane.showMessageDialog(panel, "Complete all the fields", "Error", JOptionPane.ERROR_MESSAGE);
        JOptionPane.showMessageDialog(null, message, titleBar, JOptionPane.ERROR_MESSAGE);

    }

    public void loadScenario() {

    }

    public void runSimulation() {

    }
}

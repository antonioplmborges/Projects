/MARIE Triangle Evaluator program
/This program will identify the type of 
/triangles based on the user input
/controlled loop and skipcond
/Includes handling of negatives and zeros

/Code area

		ORG 	100
start,		clear			/On start, clear asum, bsum, csum 
		store 	pyta
		store 	pytb
		store 	pytc
		input			/Accept input for a
		store 	a		/Store a
		input			/Accept input for b
		store 	b		/Store b
		input			/Accept input for c
		store 	c		/Store c

check0a, 	load	a		/Check for zeros first
		skipcond 400		/a != 0 - continue	
		jump 	checkb		
	
		jump 	check0b		/Else, check b = 0

check0b, 	load 	b		/Check if b = 0
		skipcond 400		/No? Continue
		jump 	checkc
	
		jump 	check0c		/Yes. Check c = 0

check0c, 	load	 c		/Check if c = 0
		skipcond 400		/No? Continue
		jump checkc		
	
		jump 	end		/Yes?Exit program
	
checkb,		load 	b		/as a process variable.
		store 	bplus
		skipcond 400		/Check if =0?
		jump 	checkc		/No.continue
	
		jump 	lenErr		/Yes. Print lenght error

checkc,		load 	c		/Same as above
		store 	cplus
		skipcond 400
		jump 	checka
	
		jump 	lenErr

checka,		load 	a		/Same as above
		store 	aplus
		skipcond 400
		jump 	asign		
	
		jump 	lenErr

asign,		load	aplus		/Check sign of a. Load, AC neg? Jump and change sign
		store 	acount		/use later as counter for square of side 
		skipcond 000
		jump 	bsign		/Else, check sign of b

		jump 	apos

bsign,		load 	bplus		/Check sign of b, as above
		store 	bcount		/use later as counter for square of side b
		skipcond 000
		jump 	csign		/Else, check sign of c

		jump	bpos

csign,		load	cplus		/Check sign of c, as above
		store	ccount		/use later as counter for square of side c
		skipcond 000
		jump 	aside		/Else, check sign of a

		jump 	cpos

/---------------CONVERT NEGATIVE INPUT INTO POSITIVE

apos,		load 	aplus		/Make a Positive. Load, subtract a twice. Store			
		subt 	a
		subt 	a
		store 	aplus
		load 	aplus
		store 	acount		/use later as counter for square of side a
		skipcond 000		/check for overflow
		jump 	bsign
	
		jump 	OFerr

bpos,		load 	bplus		/Make b Positive. Load, subtract b twice. Store
		subt 	b
		subt 	b
		store 	bplus
		load 	bplus
		store 	bcount		/use later as counter for square of side b
		skipcond 000		/check for overflow
		jump 	csign
	
		jump 	OFerr

cpos,		load 	cplus		/Make c Positive. Load, subtract c twice. Store
		subt 	c
		subt 	c
		store 	cplus
		load 	cplus
		store 	ccount		/use later as counter for square of side c
		skipcond 000		/check for overflow
		jump 	aside
	
		jump 	OFerr

/---------------VALIDATE THE LENGHTS
	
aside,		load 	aplus		/check length's validity of side a
		subt 	bplus
		subt 	cplus
		skipcond 800		/Is a<c+b?
		jump 	bside		/Yes. check side b

		jump 	lenErr		/No. Print lenght error

bside,		load 	bplus		/check length's validity of side b
		subt 	aplus
		subt 	cplus
		skipcond 800		/Is a<c+b?
		jump 	cside		/Yes. check side b 

		jump 	lenErr		/No. Print lenght error

cside,		load 	cplus		/check length's validity of side c
		subt 	aplus
		subt 	bplus
		skipcond 800		/Is a<c+b?
		jump 	eqltr_ab	/Yes. check triangle type

		jump 	lenErr		/No. Print lenght error

/---------------CHECK THE TRIANGLE TYPE
	
eqltr_ab,	load 	aplus
	 	subt 	bplus
		skipcond 400		/Is a=b?
		jump 	isc_ac
	
	 	jump 	eqltr_ac	/Yes. check if b=c

isc_ac, 	load 	aplus	
		subt 	cplus
		skipcond 400		/Is a=c?
		jump 	isc_bc		/No. check b=c
	
		jump 	print_isc	/yes. Print "isosceles"

isc_bc, 	load 	bplus
		subt 	cplus
		skipcond 400		/Is b=c?
		jump 	print_scl	/No.Print "scalene"

		jump 	print_isc	/Yes.Print "isosceles"

eqltr_ac, 	load 	aplus		
	 	subt 	cplus
	 	skipcond 400		/Is a=c?
	 	jump 	print_isc	/No. Print "isosceles"
	 
	 	jump 	print_eqltr	/Yes.Print "equilateral"


/---------------SQUARE OF a,b,c




mult_a,	  	load 	pyta		/Load the running total (product)
	  	add 	aplus		/Add the base number
	  	store   pyta		/Save the total
	  	skipcond 000		/Check for overflow. If number is not negative, continue
	  	jump 	dec_a

	  	jump 	OFerr		/If it is negative, error. Exit.


dec_a,	  	load 	acount		/Load counter, decrement, store
	  	subt 	one
	  	store	acount
	  	skipcond 400		/Loop condition for multiplication
	  	jump 	mult_a		/Call multiplication function	
	
	  	jump 	mult_b


mult_b,	  	load 	pytb		/Load the running total (product)
	  	add 	bplus		/Add the base number
	  	store   pytb		/Save the total
	  	skipcond 000		/Check for overflow. If number is not negative, continue
	  	jump 	dec_b

	  	jump 	OFerr		/If it is negative, error. Exit.


dec_b,	  	load 	bcount		/Load counter, decrement, store
	  	subt 	one
	  	store	bcount
	  	skipcond 400		/Loop condition for multiplication
	  	jump 	mult_b		/Call multiplication function	
	
	  	jump 	mult_c


mult_c,	  	load 	pytc		/Load the running total (product)
	  	add 	cplus		/Add the base number
	  	store   pytc		/Save the total
	  	skipcond 000		/Check for overflow. If number is not negative, continue
	  	jump 	dec_c

	  	jump 	OFerr		/If it is negative, error. Exit.


dec_c,	  	load 	ccount		/Load counter, decrement, store
	  	subt 	one
	  	store	ccount
	  	skipcond 400		/Loop condition for multiplication
	  	jump 	mult_c		/Call multiplication function	
	
	  	jump 	check_pyta

/---------------TEST PYTHAGIREAN THEOREM

check_pyta,	load 	pyta		/load square of a
	   	subt 	pytb		/sub square of b
	   	subt 	pytc		/sub square of c
	   	skipcond 400		/check if theorem is true
	   	jump 	check_pytb	/No. Test with diferent side
	
	   	jump 	print_rt	/Yes.print "Rt."


check_pytb, 	load 	pytb		/load square of b
	   	subt 	pyta		/sub square of a
	   	subt 	pytc		/sub square of c
	   	skipcond 400		/check if theorem is true
	   	jump 	check_pytc	/No. Test with diferent side
	
	   	jump 	print_rt	/Yes.print "Rt.

check_pytc, 	load 	pytc		/load square of C
	    	subt 	pyta		/sub square of a
	    	subt 	pytb		/sub square of b
	    	skipcond 400		/check if theorem is true
	    	jump 	print_trg	/No.Print "triangle"

	    	jump 	print_rt	/Yes.print "Rt.



/--------------PRINT ERROR
	
lenErr,		Clear   		/Print lenght error message
        	Store   Index		
While_err,  	Load    err_base		
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_err
        	Jump    endwhile_err
Do_err,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_err
endwhile_err,   Jump 	start		/restart program

OFerr,		Clear   		/Print overflow error message
        	Store   Index		
While_oerr,  	Load    of_base	
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_oerr
        	Jump    endwhile_oerr
Do_oerr,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_oerr
endwhile_oerr,	Jump 	start		/restart program

/---------------PRINT TRIANGLE TYPE

print_eqltr,	Clear   		/Print "equilateral"
        	Store   Index		
While_eqltr,  	Load    eqltr_base	
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_eqltr
        	Jump    endwhile_eqltr
Do_eqltr,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_eqltr
endwhile_eqltr,	Jump 	print_trg	/Print "triangle"		


print_isc,	Clear   		/Print "isosceles"
        	Store   Index		
While_isc,  	Load    isc_base	
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_isc
        	Jump    endwhile_isc
Do_isc,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_isc
endwhile_isc,   Jump 	mult_a		/check if Right?

print_scl,	Clear   		/Print "Scalene"
        	Store   Index		
While_scl,  	Load    scl_base	
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_scl
        	Jump    endwhile_scl
Do_scl,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_scl
endwhile_scl,   Jump 	mult_a		/check if is Right??

print_rt,	Clear   		/Print "Rt."
        	Store   Index		
While_rt,  	Load    rt_base	
        	Add     Index
        	Store   Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump    Do_rt
        	Jump    endwhile_rt
Do_rt,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_rt
endwhile_rt,   	Jump 	print_trg	/End. Print "triangle"


print_trg,	Clear   		/Print "triangle"
        	Store 	Index		
While_trg,  	Load 	trg_base	
        	Add  	Index
        	Store  	Addr
        	Clear
        	AddI    Addr  
        	Skipcond    400
        	Jump	Do_trg
        	Jump    endwhile_trg
Do_trg,     	Output
        	Load    Index
        	Add     one
        	Store   Index
        	Jump    While_trg
endwhile_trg,   Jump 	start		/restart program

/---------------END

end,		HALT

 


/Data area

a,		DEC	0		/Input variables a,b,c.
b,		DEC	0
c,		DEC 	0		

aplus,		DEC 	0		/Absolute value of a,b,c
bplus,		DEC 	0
cplus,		DEC 	0

pyta,		DEC 	0		/it's going to store the square of a,b,c
pytb,		DEC 	0
pytc,		DEC 	0


acount,	  	DEC 	0		/Working data. Counter for a
bcount,	  	DEC 	0		/Working data. Counter for b
ccount,	  	DEC 	0		/Working data. Counter for c

one,	  	DEC 	1		/Decrementer for counter


Index,  	Dec 	0

Addr,   	Hex 	0
err_base,   	Hex   	232
of_base,   	Hex   	24B
scl_base,  	Hex 	266
eqltr_base,  	Hex 	26F
isc_base, 	Hex 	27C
rt_base,  	Hex 	287
trg_base,  	Hex 	28C

Str_err,    	Dec 	76		/L
            	Dec 	101		/e
            	Dec 	110		/n
            	Dec 	103		/g
            	Dec 	116		/t
            	Dec 	104		/h
            	Dec 	32		/space
            	Dec 	69		/E
            	Dec 	114		/r
            	Dec 	114		/r
            	Dec 	111		/o
            	Dec 	114		/r
	    	Dec 	46		/.
	    	Dec 	32		/space
	    	Dec 	84		/T
            	Dec 	114		/r
            	Dec 	121		/y
            	Dec 	32		/space
	    	Dec 	97		/a	
		Dec 	103		/g
            	Dec 	97		/a
            	Dec 	105		/i
            	Dec 	110		/n
	    	Dec 	13		/carriage return	
	    	Dec 	0
           
Str_Of,     	Dec 	79		/O
            	Dec 	118		/v
            	Dec 	101		/e
            	Dec 	114		/r
            	Dec 	102		/f
            	Dec 	108		/l
	    	Dec 	111		/o
            	Dec 	119		/w
            	Dec 	32		/space
            	Dec 	69		/E
            	Dec 	114		/r
            	Dec 	114		/r
            	Dec 	111		/o
            	Dec 	114		/r
	    	Dec 	46		/.
	    	Dec 	32		/space
	    	Dec 	84		/T
            	Dec 	114		/r
            	Dec 	121		/y
            	Dec 	32		/space
	    	Dec 	97		/a
            	Dec 	103		/g
            	Dec	97		/a
            	Dec 	105		/i
            	Dec 	110		/n
	    	Dec 	13		/carriage return
            	Dec 	0	

Str_scl,	Dec 	83		/S
            	Dec 	99		/c
            	Dec 	97		/a
            	Dec 	108		/l
            	Dec 	101		/e
            	Dec 	110		/n
	    	Dec 	101		/e
            	Dec 	32		/space
            	Dec 	0

Str_eqltr,  	Dec 	69		/E
            	Dec 	113		/q
            	Dec 	117		/u
            	Dec 	105		/i
            	Dec 	108		/l
            	Dec 	97		/a
	    	Dec 	116		/t
            	Dec 	101		/e
            	Dec 	114		/r
            	Dec 	97		/a
            	Dec 	108		/l
            	Dec 	32		/space
            	Dec 	0            	

Str_isc,  	Dec 	73		/I
            	Dec 	115		/s
            	Dec 	111		/o
            	Dec 	115		/s
            	Dec 	99		/c
            	Dec 	101		/e
	    	Dec 	108		/l
            	Dec 	101		/e
            	Dec 	115		/s
            	Dec 	32		/space
	    	Dec 	0            	

Str_rt,     	Dec 	82		/R
            	Dec 	116		/t
	    	Dec 	46		/.
            	Dec 	32		/space
            	Dec 	0   

Str_trg,  	Dec 	84		/T
            	Dec 	114		/r
            	Dec 	105		/i
            	Dec 	97		/a
            	Dec 	110		/n
            	Dec 	103		/g
	    	Dec 	108		/l
            	Dec 	101		/e
            	Dec 	32		/space
            	Dec 	13		/carriage return
            	Dec 	0            